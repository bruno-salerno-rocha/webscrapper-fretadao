require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/profiles", type: :request do
  
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Foo",
      github_url: "https://github.com/bruno-salerno-rocha"
    }
  }

  let(:invalid_attributes) {
    {
      name: '',
      github_url: ''
    }
  }

  let!(:profile) do
    VCR.use_cassette("github_profile") do
      Profile.create! valid_attributes
    end
  end

  describe "GET /index" do
    it "renders a successful response", :create_profile do
      get profiles_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response", :create_profile do
      get profile_url(profile)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_profile_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response", :create_profile do
      get edit_profile_url(profile)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Profile" do
        VCR.use_cassette("github_profile") do
          expect {
            post profiles_url, params: { profile: valid_attributes }
          }.to change(Profile, :count).by(1)
        end
      end

      it "redirects to the created profile" do
        VCR.use_cassette("github_profile") do
          post profiles_url, params: { profile: valid_attributes }
        end
        expect(response).to redirect_to(profile_url(Profile.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Profile" do
        VCR.use_cassette("github_profile") do
          expect {
            post profiles_url, params: { profile: invalid_attributes }
          }.to change(Profile, :count).by(0)
        end
      end

      it "returns a unprocessable entity response" do
        VCR.use_cassette("github_profile") do
          post profiles_url, params: { profile: invalid_attributes }
        end
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "New Foo" }
      }

      it "updates the requested profile", :create_profile do
        VCR.use_cassette("github_profile") do
          patch profile_url(profile), params: { profile: new_attributes }
        end
        profile.reload
        expect(profile.name).to eq("New Foo")
      end

      it "redirects to the profile", :create_profile do
        VCR.use_cassette("github_profile") do
          patch profile_url(profile), params: { profile: new_attributes }
        end
        profile.reload
        expect(response).to redirect_to(profile_url(profile))
      end
    end

    context "with invalid parameters" do
      it "returns a unprocessable entity response", :create_profile do
        patch profile_url(profile), params: { profile: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested profile", :create_profile do
      expect {
        delete profile_url(profile)
      }.to change(Profile, :count).by(-1)
    end

    it "redirects to the profiles list", :create_profile do
      delete profile_url(profile)
      expect(response).to redirect_to(profiles_url)
    end
  end
end
